{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","Grid","container","spacing","map","val","index","item","xs","component","gutterBottom","key","title","subtitle","Paper","Table","TableHead","TableRow","TableCell","TableBody","name","orders","revenues","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8WAiGeA,MAhFf,WAcE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,QAClD,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,aAGA,kBAACC,EAAA,EAAD,CAAQJ,MAAM,WAAd,WAIJ,8BACE,kBAACK,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GA5BjB,CACZ,CAAC,MAAS,UAAW,SAAY,WACjC,CAAC,MAAS,QAAS,SAAY,WAC/B,CAAC,MAAS,cAAe,SAAY,MACrC,CAAC,MAAS,SAAU,SAAY,QA0BlBC,KAAI,SAACC,EAAIC,GACb,OAAO,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAK,GAErB,kBAACV,EAAA,EAAD,CAAYW,UAAU,KAAKV,QAAQ,KAAKH,MAAM,UAAUc,cAAY,GAChE,uBAAGC,IAAKL,GAAQD,EAAIO,QAGxB,kBAACd,EAAA,EAAD,CAAYW,UAAU,IAAIV,QAAQ,MAChC,uBAAGY,IAAKL,GAAQD,EAAIQ,gBAO9B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,uBAIJ,kBAACC,EAAA,EAAD,KAhDU,CAClB,CAAC,KAAQ,cAAgB,OAAU,GAAI,SAAY,WACnD,CAAC,KAAQ,YAAa,OAAU,IAAK,SAAY,WACjD,CAAC,KAAQ,YAAa,OAAU,IAAK,SAAY,WACjD,CAAC,KAAQ,QAAS,OAAU,GAAI,SAAY,YA8CpBf,KAAI,SAACC,GACf,OAAO,kBAACY,EAAA,EAAD,KACP,kBAACC,EAAA,EAAD,KACGb,EAAIe,MAEP,kBAACF,EAAA,EAAD,KACCb,EAAIgB,QAEL,kBAACH,EAAA,EAAD,KACCb,EAAIiB,oBCxEHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9cca8bc.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper'\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport MenuIcon from '@material-ui/icons/Menu';\n\n\nfunction App() {\n  const boxes = [\n    {'title': 'Revenue', 'subtitle': 'Rm 3000'},\n    {'title': 'Users', 'subtitle': 'Rm 2000'},\n    {'title': 'Restaurants', 'subtitle': '15'},\n    {'title': 'Riders', 'subtitle': '120'}\n  ]\n\n  const restaurants = [\n    {'name': \"Uncle's Bob\",  'orders': 90, 'revenues': 'Rm10000'},\n    {'name': 'McDonalds', 'orders': 100, 'revenues': 'Rm20000'},\n    {'name': 'Pizza Hut', 'orders': 100, 'revenues': 'Rm19500'},\n    {'name': 'Murni', 'orders': 80, 'revenues': 'Rm15000'}\n  ];\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">\n            Dashboard\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n\n      <main>\n        <Grid container spacing={3}>\n            {\n            boxes.map((val,index) => {\n              return <Grid item xs ={3}> \n\n                <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n                    <p key={index}>{val.title}</p>\n                </Typography>\n\n                <Typography component=\"p\" variant=\"h4\">\n                  <p key={index}>{val.subtitle}</p>\n                </Typography>\n\n              </Grid>\n            })}\n        </Grid>\n\n        <Paper>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Name</TableCell>\n                <TableCell>Orders</TableCell>\n                <TableCell>Sale Amounts</TableCell>\n              </TableRow>\n            </TableHead>\n\n            <TableBody>\n                {\n                restaurants.map((val) => {\n                  return <TableRow>\n                  <TableCell>\n                    {val.name}\n                  </TableCell>\n                  <TableCell>\n                  {val.orders}\n                  </TableCell>\n                  <TableCell>\n                  {val.revenues}\n                  </TableCell>\n\n                  </TableRow>\n                })}\n            </TableBody>\n          </Table>\n        </Paper>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}