{"version":3,"sources":["components/ListTable.js","components/Header.js","components/Box.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["ListTable","props","Table","size","TableHead","TableRow","TableCell","TableBody","restaurants","map","val","name","address","email","Header","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","Box","Grid","item","xs","Paper","title","component","gutterBottom","subtitle","Dashboard","boxes","state","fetch","proxyUrl","then","response","json","data","console","log","setState","container","spacing","this","index","key","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6VA+BeA,MAxBf,SAAmBC,GACf,OAAO,kBAACC,EAAA,EAAD,CAAOC,KAAK,SACjB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,uBAIJ,kBAACC,EAAA,EAAD,KAEIN,EAAMO,YAAYC,KAAI,SAACC,GACrB,OAAO,kBAACL,EAAA,EAAD,KACP,kBAACC,EAAA,EAAD,KAAYI,EAAIC,MAChB,kBAACL,EAAA,EAAD,SAAaI,EAAIE,SACjB,kBAACN,EAAA,EAAD,KAAYI,EAAIG,c,iDCDbC,MAdf,WACI,OAAO,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACpB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,QAClD,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,aAGA,kBAACC,EAAA,EAAD,CAAQJ,MAAM,WAAd,Y,oECWKK,MAnBf,SAAaxB,GACT,OAAO,kBAACyB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAK,GACnB,kBAACC,EAAA,EAAD,KAEyB,YAApB5B,EAAMS,IAAIoB,MAAsB,kBAAC,IAAD,MAAc,+BAC1B,UAApB7B,EAAMS,IAAIoB,MAAoB,kBAAC,IAAD,MAAgB,+BAC1B,gBAApB7B,EAAMS,IAAIoB,MAA0B,kBAAC,IAAD,MAAe,+BAC/B,WAApB7B,EAAMS,IAAIoB,MAAqB,kBAAC,IAAD,MAAgB,+BAChD,kBAACR,EAAA,EAAD,CAAYS,UAAU,KAAKR,QAAQ,KAAKH,MAAM,UAAUY,cAAY,GAC/D/B,EAAMS,IAAIoB,OAGf,kBAACR,EAAA,EAAD,CAAYS,UAAU,IAAIR,QAAQ,MAC7BtB,EAAMS,IAAIuB,aCiCZC,E,kDAvCb,WAAYjC,GAAO,IAAD,8BAChB,cAAMA,IARRkC,MAAQ,CACN,CAAC,MAAS,UAAW,SAAY,WACjC,CAAC,MAAS,QAAS,SAAY,WAC/B,CAAC,MAAS,cAAe,SAAY,MACrC,CAAC,MAAS,SAAU,SAAY,QAKhC,EAAKC,MAAQ,CAAC5B,YAAa,IAFX,E,gEAKE,IAAD,OAGjB6B,MAAMC,oGAAgBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAC3DC,QAAQC,IAAIF,GACZ,EAAKG,SAAY,CACfrC,YAAakC,EAAI,W,+BAMrB,OACA,6BACE,kBAAC,EAAD,MAEA,kBAAChB,EAAA,EAAD,CAAMoB,WAAS,EAACC,QAAS,GAEzBC,KAAKb,MAAM1B,KAAI,SAACC,EAAKuC,GACnB,OAAO,kBAAC,EAAD,CAAKC,IAAKD,EAAOvC,IAAKA,QAI/B,kBAACmB,EAAA,EAAD,KACI,kBAACP,EAAA,EAAD,CAAYS,UAAU,KAAKR,QAAQ,KAAKH,MAAM,UAAUY,cAAY,GAApE,UAGA,kBAAC,EAAD,CAAWxB,YAAawC,KAAKZ,MAAM5B,oB,GAxCrB2C,IAAMC,WCIfC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.d7cb4d90.chunk.js","sourcesContent":["import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\n\r\nfunction ListTable(props){\r\n    return <Table size='small'>\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell>Name</TableCell>\r\n          <TableCell>Orders</TableCell>\r\n          <TableCell>Sale Amounts</TableCell>\r\n        </TableRow>\r\n      </TableHead>\r\n\r\n      <TableBody>\r\n          {\r\n          props.restaurants.map((val) => {\r\n            return <TableRow>\r\n            <TableCell>{val.name}</TableCell>\r\n            <TableCell> {val.address}</TableCell>\r\n            <TableCell>{val.email}</TableCell>\r\n\r\n            </TableRow>\r\n          })}\r\n      </TableBody>\r\n    </Table>\r\n}\r\n\r\nexport default ListTable;\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nfunction Header(){\r\n    return <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            Dashboard\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EuroIcon from '@material-ui/icons/Euro';\r\nimport StoreIcon from '@material-ui/icons/Store';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport Motorcycle from '@material-ui/icons/Motorcycle';\r\nimport { Paper } from '@material-ui/core';\r\n\r\nfunction Box(props){\r\n    return <Grid item xs ={3}> \r\n        <Paper>\r\n\r\n            {props.val.title === 'Revenue' ? <EuroIcon/> : <span/>}\r\n            {props.val.title === 'Users' ? <PeopleIcon/> : <span/>}\r\n            {props.val.title === 'Restaurants' ? <StoreIcon/> : <span/>}\r\n            {props.val.title === 'Riders' ? <Motorcycle/> : <span/>}\r\n            <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                {props.val.title}\r\n            </Typography>\r\n\r\n            <Typography component=\"p\" variant=\"h4\">\r\n                {props.val.subtitle}\r\n            </Typography>\r\n        </Paper>\r\n    </Grid>\r\n}\r\n\r\nexport default Box;\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ListTable from './ListTable';\r\nimport Header from './Header';\r\nimport Box from './Box';\r\n\r\nclass Dashboard extends React.Component{\r\n  boxes = [\r\n    {'title': 'Revenue', 'subtitle': 'Rm 3000'},\r\n    {'title': 'Users', 'subtitle': 'Rm 2000'},\r\n    {'title': 'Restaurants', 'subtitle': '15'},\r\n    {'title': 'Riders', 'subtitle': '120'}\r\n  ]\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {restaurants: []}\r\n  }\r\n\r\n  componentDidMount(){\r\n    const url = 'http://restaurant-api-module-2.herokuapp.com/api/restaurants'\r\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/'\r\n    fetch(proxyUrl + url).then(response => response.json()).then(data => {\r\n      console.log(data)\r\n      this.setState = ({\r\n        restaurants: data['data']\r\n      });\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n    <div>\r\n      <Header/>\r\n\r\n      <Grid container spacing={3}>\r\n      {\r\n      this.boxes.map((val, index) => {\r\n        return <Box key={index} val={val}/>\r\n          })}\r\n      </Grid>\r\n\r\n      <Paper>\r\n          <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n          Orders\r\n          </Typography>\r\n          <ListTable restaurants={this.state.restaurants}/>\r\n      </Paper>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}